type: edu
files:
- name: task.py
  visible: true
  placeholders:
  - offset: 188
    length: 926
    placeholder_text: "# TODO: написать класс Book"
    dependency:
      section: Атрибуты и методы
      lesson: Лабораторная работа 2
      task: Задание 1
      file: task.py
      placeholder: 1
      is_visible: false
    initial_state:
      length: 27
      offset: 188
    initialized_from_dependency: true
    selected: false
    status: Solved
    encrypted_possible_answer: |
      class Book:
          def __init__(self, id_, name, pages):
              self.id = id_
              self.name = name
              self.pages = pages

          def __str__(self):
              return f'Книга "{self.name}"'

          def __repr__(self):
              return f'Book(id_={self.id}, name=\'{self.name}\', pages={self.pages})'
  - offset: 1115
    length: 30
    placeholder_text: "# TODO: написать класс Library"
    initial_state:
      length: 30
      offset: 216
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |2

      class Library:
          def __init__(self, books=None):
              if books is None:
                  self.books = []
              else:
                  self.books = books

          def get_next_book_id(self):
              if not self.books:
                  return 1
              return self.books[-1].id + 1

          def get_index_by_book_id(self, id_):
              for i, book in enumerate(self.books):
                  if book['id'] == id_:
                      return i
              raise ValueError('Книги с запрашиваемым id не существует')
  text: |
    BOOKS_DATABASE = [
        {
            "id": 1,
            "name": "test_name_1",
            "pages": 200,
        },
        {
            "id": 2,
            "name": "test_name_2",
            "pages": 400,
        }
    ]


    # TODO: написать класс Book
    # TODO: написать класс Library

    if __name__ == '__main__':
        empty_library = Library()  # инициализируем пустую библиотеку
        print(empty_library.get_next_book_id())  # проверяем следующий id для пустой библиотеки

        list_books = [
            Book(id_=book_dict["id"], name=book_dict["name"], pages=book_dict["pages"]) for book_dict in BOOKS_DATABASE
        ]
        library_with_books = Library(books=list_books)  # инициализируем библиотеку с книгами
        print(library_with_books.get_next_book_id())  # проверяем следующий id для непустой библиотеки

        print(library_with_books.get_index_by_book_id(1))  # проверяем индекс книги с id = 1
  learner_created: false
- name: tests/test_task.py
  visible: false
  text: |
    import inspect
    import unittest

    import task

    BOOKS_DATABASE = [
        {
            "id": 1,
            "name": "test_name_1",
            "pages": 200,
        },
        {
            "id": 2,
            "name": "test_name_2",
            "pages": 400,
        }
    ]


    class TestLibrary(unittest.TestCase):
        def test_existance(self):
            try:
                self.assertTrue(inspect.isclass(task.Library), 'Library не является классом')
            except AttributeError:
                raise self.failureException('Library не определён')

        def test_init(self):
            signature = inspect.signature(task.Library.__init__)
            try:
                self.assertNotEqual(inspect._empty, signature.parameters['books'].default,
                                    'Атрибут books должен иметь значение по умолчанию')
            except KeyError:
                raise self.failureException('В инициализаторе отсутствует параметр books')
            library = task.Library()
            self.assertEqual([], library.books)

        def test_next(self):
            self.assertTrue('get_next_book_id' in [name for name, _ in inspect.getmembers(task.Library)],
                            'Не определён метод get_next_book_id')
            library = task.Library()
            self.assertEqual(1, library.get_next_book_id(), 'get_next_book_id пустой библиотеки не возвращает 1')
            library = task.Library(
                [task.Book(id_=book['id'], name=book['name'], pages=book['pages']) for book in BOOKS_DATABASE])
            self.assertEqual(3, library.get_next_book_id(), 'get_next_book_id пустой библиотеки не возвращает 1')

        def test_x_by_id(self):
            self.assertTrue('get_index_by_book_id' in [name for name, _ in inspect.getmembers(task.Library)],
                            'Не определён метод get_index_by_book_id')
            library = task.Library(
                [task.Book(id_=book['id'], name=book['name'], pages=book['pages']) for book in BOOKS_DATABASE])
            self.assertEqual(0, library.get_index_by_book_id(1))
            self.assertEqual(1, library.get_index_by_book_id(2))
            with self.assertRaises(ValueError, msg='Отсутствие запрошенной книги  библиотеке должно вызывать ошибку') as cm:
                library.get_index_by_book_id(3)
            self.assertTrue('Книги с запрашиваемым id не существует' in cm.exception.args,
                            'Сообщение об ошибке не соответствует заданному')
  learner_created: false
- name: __init__.py
  visible: false
  learner_created: false
- name: tests/__init__.py
  visible: false
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 12 Dec 2024 14:45:56 UTC"
record: -1
